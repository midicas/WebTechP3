# WebTechP3
Group ID: 50
Students: Cas Bouwman (1121448), Ruben Figge (0724912), Jochem Sluijter (4323033)
Link:
Description:
When accessing the link you are presented with the catalogue page. This page is rendered using the index.js file in the scripts folder. This page uses AJAX to render to retrieve 10 books from the server and render the covers and the plot from the books on the catalogue page.
To see more books you can click the arrows below the list of books. This again uses AJAX to get the next 10 books from the database and uses the same method for render the books as it does on load.

To view further info of a book and create reservation you can click any where on the section containing information of the book. This renders the description page. On load it uses AJAX to retrieve the specific book from the database and renders the information on the page. Furthermore it checks whether the current user is logged in or not. It then checks if the logged in user has the current book in its current reservations. It does all this checking server side and send the status of the user and reservation back. Depending on the response the reserve button is changed accordingly. If you click the reserve/release button it communicates with the server where if the user does not have the book it is added to the users current reservations and reservation history, otherwise the book is removed from the users current reservation. The books available copies is updated accordingly. If you are not logged in you are redirected to a login page.

All the above functionality is implemented in index.js in the routes folder.

You can go to the profile page by clicking MyLibrary in the navbar. If you are not logged in you are redirected to the login page. If you login the username and the password are communicated to the server where the hash of the password is compared to the hash of the password in the database of the user with the corresponding username. If true the username is put into session.user. You are then redirected to the profile page. If you do not have an account you can signup by clicking the link underneath the login fields. Here you are asked to input the relevant information this information is relayed to the server using a POST request. Server side the password is hashed and a new user is created this user is added to the database. Client side you are then redirected to the profile page. Where the content is rendered in much the same way as the description page of a book. You can see personal information and your reservation history and current reservations. From this page you can click any title of a book to be redirected to the description of the book. You can release reservations from you current reservations. This uses the same mechanism as it does on the description page.

All this functionality is implemented in the users.js in the routes folder.
The html for each page is generated by the corresponding jade file in the views folder.
The style for each page is the corresponding css file in the public/stylesheets folder.
The javascript for each page is in the corresponding js file in the public/scripts folder.
The classes for the users and books is in the objects folder

The database consists of 2 tables 1. books and 2. users.
books have an 
1. id unique for each book.
2. title
3. url of the cover
4. Author
5. Genre
7. Publisher
8. Description
9. Year of publishing
10. Available copies

users have an
1. name
2. email address
3. username unique for each user
4. hashed password
5. address
6. reservation history (list of book ids)
7. current reservation (list of book ids)

Users & Passwords
1. userName: RubenXbooks ,passWord: booksXRuben
2. userName: casLikesBooks ,passWord: CaBouw&2
3. userName: firstLast, passWord: firstLast&2
4. userName: fakeName, passWord: ?8$&bbNqQua+Nm6
5. userName: finallyDone, passWord: Done

SQL Definition
CREATE TABLE IF NOT EXISTS books (
            ID INTEGER PRIMARY KEY,
            TITLE TEXT,
            URL TEXT,
            AUTHOR TEXT,
            GENRE TEXT,
            PUBLISHER TEXT,
            DESCRIPTION TEXT,
            YEAR INTEGER,
            AVAILABLECOPIES INTEGER
        )
CREATE TABLE IF NOT EXISTS users (
            NAME TEXT PRIMARY KEY,
            EMAIL TEXT,
            USERNAME TEXT,
            PASSWORD TEXT,
            ADDRESS TEXT,
            RESERVATION_HISTORY TEXT,
            CURRENT_RESERVATIONS TEXT
        )

